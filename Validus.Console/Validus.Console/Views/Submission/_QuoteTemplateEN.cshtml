@model Validus.Models.QuoteEN

<div class="row-fluid">
	<div class="span1"></div>

	<div class="span10">
	    <div class="row-fluid">
	        <div class="span2 control-group">
	            <label class="control-label">
	                @Html.DisplayNameFor(model => model.SubscribeReference)
	            </label>
	            @Html.TextBoxFor(model => model.SubscribeReference, new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-small span12 val-webpolicy" },
	                    { "data-bind", "value: SubscribeReference, validate: $root.IsInitialised" },
	                    { "readonly", "readonly"}
	                })
	        </div>
	        <div class="span2 control-group">
	            <label class="control-label">
	                @Html.DisplayNameFor(model => model.SubmissionStatus)
	                <abbr title="Submission status is required">*</abbr>
	            </label>
	            @Html.DropDownListFor(model => model.SubmissionStatus, new List<SelectListItem>(), new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-large span12" },
	                    { "data-bind", "options: SubmissionStatusList, value: SubmissionStatus, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" }
	                })
	        </div>
	        <div class="span2 control-group" data-bind="visible: SubmissionStatus() === 'DECLINED'">
	            @* TODO: Remove inline styles and use HTML helpers to render controls *@
	            <label class="control-label">
	                @Html.DisplayNameFor(model => model.DeclinatureReason)
	                <a href="#" title="Edit Declinature" style="float: right;"
	                   data-bind="click: ShowDeclinatureDialog">Edit</a>
	            </label>
	            @Html.DropDownListFor(model => model.DeclinatureReason, new List<SelectListItem>(), new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-large span12" },
	                    { "data-bind", "options: DeclinatureReasonList, value: DeclinatureReason, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" }
	                })
	        </div>
	        <div class="span2 control-group">
	            <label class="control-label">
	                @Html.DisplayNameFor(model => model.FacilityRef)
	            </label>
	            @Html.TextBoxFor(model => model.FacilityRef, new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-small span12 typeahead" },
	                    { "data-bind", "value: _FacilityRef, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" },
	                    { "data-rest", "Facility" }
	                })
	        </div>
	        <!-- ko if: RenPolId().length > 0 -->
	        <div class="span2 control-group">
	            <label class="control-label">
	                @Html.DisplayNameFor(model => model.RenPolId)
	            </label>
	            @Html.TextBoxFor(model => model.RenPolId, new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-small span12 val-webpolicy" },
	                    { "data-bind", "value: RenPolId, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" },
	                    { "readonly", "readonly"}
	                })
	        </div>
	        <!-- /ko -->
	        <div class="span1">
	            <i title="Signifies whether or not the current quote is synchronised to Subscribe"
	               data-bind="css: { 'icon-star': IsSubscribeMaster(), 'icon-star-empty': !IsSubscribeMaster() }, event: { click: function(data, event) { IsSubscribeMaster(true) } }"></i>
	        </div>
	    </div>
        
        <div class="row-fluid">
                    <div class="span10 control-group">
                        <label class="control-label">
                            @Html.DisplayNameFor(model => model.Description)
                        </label>
                        @Html.TextBoxFor(model => model.Description, new Dictionary<string, object> 
                            { 
                                { "id", ""},
                                { "class", "input-xlarge span12" },
                                { "data-bind", "value: Description, validate: $root.IsInitialised" },
                                { "rows", "3" }
                            })
                    </div>
                </div>
        
	    <div class="row-fluid">
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.COB)
					<abbr title="COB is required">*</abbr>
				</label>
				@Html.TextBoxFor(model => model.COB, new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-mini span12 typeahead" },
						{ "data-bind", "value: _COB, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked(), attr: { readonly: SubscribeReference().length > 0 }" },
						{ "data-rest", "COB" }
					})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.MOA)
					<abbr title="MOA is required">*</abbr>
				</label>
				@Html.TextBoxFor(model => model.MOA, new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-mini span12 typeahead" },
						{ "data-bind", "value: _MOA, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" },
						{ "data-rest", "MOA" }
					})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.OriginatingOffice)
					<abbr title="Office is required">*</abbr>
				</label>
				@Html.DropDownListFor(model => model.OriginatingOffice, new List<SelectListItem>(), new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-large span12" },
						{ "data-bind", "options: ConsoleApp.OfficesList, optionsValue: 'Code', optionsText: 'Name', value: OriginatingOfficeId, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" },						
					})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.PolicyType)
					<abbr title="Policy type is required">*</abbr>
				</label>
				@Html.DropDownListFor(model => model.PolicyType, new List<SelectListItem>(), new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-large span12" },
						{ "data-bind", "options: PolicyTypeList, value: PolicyType, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" }
					})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.EntryStatus)
					<abbr title="Entry status is required">*</abbr>
				</label>
				<!-- ko if: IsLiveOrCancelled -->
				@Html.TextBoxFor(model => model.EntryStatus, new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-small span12 typeahead" },
						{ "data-bind", "value: EntryStatus, validate: $root.IsInitialised" },
						{ "readonly", "readonly" }
					})
				<!-- /ko -->
				<!-- ko ifnot: IsLiveOrCancelled -->
				@Html.DropDownListFor(model => model.EntryStatus, new List<SelectListItem>(), new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-large span12" },
						{ "data-bind", "options: EntryStatusList, value: EntryStatus, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" }
					})
				<!-- /ko -->
			</div>
		</div>

	    <div class="row-fluid">
	        <div class="span2 control-group">
	            <label class="control-label">
	                @Html.DisplayNameFor(model => model.InceptionDate)
	            </label>
	            <button class="btn btn-mini pull-right datepicker" type="button" data-bind="enable: IsSubscribeMaster() && !$parent.IsLocked()">
	                <i class="icon-calendar"></i>
	            </button>
	            @Html.TextBoxFor(model => model.InceptionDate, new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-small span9 datepicker" },
	                    { "data-bind", "value: InceptionDate, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" },
                        { "readonly", "readonly" }
	                })
	        </div>
	        <div class="span2 control-group">
	            <label class="control-label">
	                @Html.DisplayNameFor(model => model.ExpiryDate)
	            </label>
	            <button class="btn btn-mini pull-right datepicker" type="button" data-bind="enable: IsSubscribeMaster() && !$parent.IsLocked()">
	                <i class="icon-calendar"></i>
	            </button>
	            @Html.TextBoxFor(model => model.ExpiryDate, new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-small span9 datepicker" },
	                    { "data-bind", "value: ExpiryDate, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" },
                        { "readonly", "readonly" }
	                })
	        </div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.AccountYear)
					<abbr title="Account Year is required">*</abbr>
				</label>
				@Html.TextBoxFor(model => model.AccountYear, new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-small span12" },
	                    { "data-bind", "value: AccountYear, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" }
	                })
			</div>
	        <div class="span2 control-group">
	            <label class="control-label">
	                @Html.DisplayNameFor(model => model.QuoteExpiryDate)
	                <abbr title="Quote expiry date is required">*</abbr>
	            </label>
	            <button class="btn btn-mini pull-right datepicker" type="button" data-bind="enable: !$parent.IsLocked()">
	                <i class="icon-calendar"></i>
	            </button>
	            @Html.TextBoxFor(model => model.QuoteExpiryDate, new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-small span9 datepicker" },
	                    { "data-bind", "value: QuoteExpiryDate, validate: $root.IsInitialised, enable: !$parent.IsLocked()" },
	                    { "readonly", "readonly" }
	                })
	        </div>
	    </div>

		<div class="row-fluid">
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.Currency)
				</label>
				@Html.TextBoxFor(model => model.Currency, new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-small span12 typeahead" },
						{ "data-bind", "value: _Currency, validate: $root.IsInitialised, enable: !$parent.IsLocked()" },
						{ "data-rest", "Currency" }
					})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.TechnicalPremium)
				</label>
				@Html.TextBoxFor(model => model.TechnicalPremium, new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-large span12 val-currency" },
						{ "data-bind", "auto-numeric: { data: TechnicalPremium }, valueUpdate: 'keyup', enable: !$parent.IsLocked()" }
					})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.BenchmarkPremium)
				</label>
				@Html.TextBoxFor(model => model.BenchmarkPremium, new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-large span12 val-currency" },
						{ "data-bind", "auto-numeric: { data: BenchmarkPremium }, valueUpdate: 'keyup', enable: !$parent.IsLocked()" }
					})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.TechnicalPricingMethod)
				</label>
				@Html.DropDownListFor(model => model.TechnicalPricingMethod, new List<SelectListItem>(), new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-large span12" },
						{ "data-bind", "options: TechnicalPricingMethodList, value: TechnicalPricingMethod, validate: $root.IsInitialised, enable: !$parent.IsLocked()" }
					})
			</div>
			<div class="span1 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.TechnicalPricingBindStatus)
				</label>
				@Html.DropDownListFor(model => model.TechnicalPricingBindStatus, new List<SelectListItem>(), new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-large span12" },
						{ "data-bind", "options: TechnicalPricingBindStatusList, value: TechnicalPricingBindStatus, validate: $root.IsInitialised, enable: !$parent.IsLocked()" }
					})
			</div>
			<div class="span1 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.TechnicalPricingPremiumPctgAmt)
				</label>
				@Html.DropDownListFor(model => model.TechnicalPricingPremiumPctgAmt, new List<SelectListItem>(), new Dictionary<string, object> 
					{ 
						{ "id", ""},
						{ "class", "input-large span12" },
						{ "data-bind", "options: TechnicalPricingPremiumPctgAmtList, value: TechnicalPricingPremiumPctgAmt, validate: $root.IsInitialised, enable: !$parent.IsLocked()" }
					})
			</div>
		</div>

		<div class="row-fluid">
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.AmountOrOPL)
				</label>
				@Html.DropDownListFor(model => model.AmountOrOPL, new List<SelectListItem>(), new Dictionary<string, object> 
				{ 
					{ "id", ""},
					{ "class", "input-large span12" },
					{ "data-bind", "options: ['Amt', 'OPL'], value: AmountOrOPL, validate: $root.IsInitialised, enable: !$parent.IsLocked()" }
				})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.LimitCCY)
				</label>
				@Html.TextBoxFor(model => model.LimitCCY, new Dictionary<string, object> 
				{ 
					{ "id", ""},
					{ "class", "input-small span12 typeahead" },
					{ "data-bind", "value: _LimitCCY, validate: $root.IsInitialised, enable: !$parent.IsLocked() && AmountOrOPL() === 'Amt'" },
					{ "data-rest", "Currency" }
				})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.LimitAmount)
				</label>
				@Html.TextBoxFor(model => model.LimitAmount, new Dictionary<string, object> 
				{ 
					{ "id", ""},
					{ "class", "input-large span12 val-currency" },
					{ "data-bind", "auto-numeric: { data: LimitAmount }, valueUpdate: 'keyup', enable: !$parent.IsLocked() && AmountOrOPL() === 'Amt'" }
				})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.ExcessCCY)
				</label>
				@Html.TextBoxFor(model => model.ExcessCCY, new Dictionary<string, object> 
				{ 
					{ "id", ""},
					{ "class", "input-small span12 typeahead" },
					{ "data-bind", "value: _ExcessCCY, validate: $root.IsInitialised, enable: !$parent.IsLocked()" },
					{ "data-rest", "Currency" }
				})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.ExcessAmount)
				</label>
				@Html.TextBoxFor(model => model.ExcessAmount, new Dictionary<string, object> 
				{ 
					{ "id", ""},
					{ "class", "input-large span12 val-currency" },
					{ "data-bind", "auto-numeric: { data: ExcessAmount }, valueUpdate: 'keyup', enable: !$parent.IsLocked()" }
				})
			</div>
		</div>

		<div class="row-fluid">
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.AmountOrONP)
				</label>
				@Html.DropDownListFor(model => model.AmountOrONP, new List<SelectListItem>(), new Dictionary<string, object> 
				{ 
					{ "id", ""},
					{ "class", "input-large span12" },
					{ "data-bind", "options: ['%', 'Amt', '% ONP'], value: AmountOrONP, validate: $root.IsInitialised, enable: !$parent.IsLocked()" }
				})
			</div>
			<div class="span2 control-group">
				<label class="control-label">
					@Html.DisplayNameFor(model => model.QuotedPremium)
				</label>
				@Html.TextBoxFor(model => model.QuotedPremium, new Dictionary<string, object> 
				{ 
					{ "id", ""},
					{ "class", "input-large span12 val-currency" },
					{ "data-bind", "auto-numeric: { data: QuotedPremium }, valueUpdate: 'keyup', enable: !$parent.IsLocked()" }
				})
			</div>
		</div>
		
	    <div class="row-fluid">
	        <div class="span10 control-group">
	            <label class="control-label">
	                @Html.DisplayNameFor(model => model.QuoteComments)
	            </label>
	            @Html.TextAreaFor(model => model.QuoteComments, new Dictionary<string, object> 
	                { 
	                    { "id", ""},
	                    { "class", "input-large span12" },
	                    { "data-bind", "value: QuoteComments, validate: $root.IsInitialised, enable: !$parent.IsLocked()" },
	                    { "rows", "3" }
	                })
	        </div>
	    </div>
        
	    <div class="row-fluid" data-bind="visible: ValidationErrors().length > 0">
			<div class="span12">
				<div class="alert alert-error">
					<b>Validation Errors:</b><br /><br />
					<ul data-bind="html: ValidationErrors">
					</ul>
				</div>
			</div>
		</div>
	</div>

    <div class="span1">
          <!-- ko if: CanDelete -->
          <span class=" btn btn-mini" data-bind="click: DeleteQuote"><small> Delete Quote</small></span>
        <!-- /ko -->
    </div>
</div>

<div class="val-declinature modal hide" role="dialog" aria-hidden="true">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">
			<i class="icon-remove"></i>
		</button>
		<h5>Declinature</h5>
	</div>
    <div class="modal-body">
        <div class="row-fluid">
            <div class="span12 control-group">
                @Html.LabelFor(model => model.DeclinatureReason, new Dictionary<string, object> 
                    { 
                        { "class", "control-label" }
                    })
                @Html.DropDownListFor(model => model.DeclinatureReason, new List<SelectListItem>(), new Dictionary<string, object> 
                    { 
                        { "id", ""},
                        { "class", "input-xxlarge span12" },
                        { "data-bind", "options: DeclinatureReasonList, value: DeclinatureReason, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" }
                    })
            </div>
        </div>
        <div class="row-fluid">
            <div class="span12 control-group">
                @Html.LabelFor(model => model.DeclinatureComments, new Dictionary<string, object> 
                    { 
                        { "class", "control-label" }
                    })
                @Html.TextAreaFor(model => model.DeclinatureComments, new Dictionary<string, object> 
                    { 
                        { "id", ""},
                        { "class", "input-xxlarge span12" },
                        { "data-bind", "value: DeclinatureComments, validate: $root.IsInitialised, enable: IsSubscribeMaster() && !$parent.IsLocked()" },
                        { "rows", "12" }
                    })
            </div>
        </div>
    </div>
    
    <div class="modal-footer">
		@* TODO: Implement Cancel()
		<a href="#" class="btn btn-small" data-dismiss="modal">Cancel</a>
		*@
		<a href="#" class="btn btn-small btn-primary" data-dismiss="modal">OK</a>
	</div>
</div>