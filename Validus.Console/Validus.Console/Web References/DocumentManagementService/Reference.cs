//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace Validus.Console.DocumentManagementService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DMSServiceSoap", Namespace="http://talbotuw.com/webservices")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FileNetProperty[]))]
    public partial class DMSService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUWDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUWDocumentsByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUWDocumentByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetUWDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetUWDocumentsByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetUWDocumentByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDMSDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDMSUWDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITDocumentsByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITDocumentByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetITDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetITDocumentsByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetITDocumentByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetURSLDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetURSLDocumentsByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetURSLDocumentsByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetURSLDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetURSLDocumentsByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetURSLDocumentsByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetComplianceDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetComplianceDocumentsByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetComplianceDocumentsByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetComplianceDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetComplianceDocumentsByObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback JSONGetComplianceDocumentsByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback FNUploadDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FNUpdateDocumentPropertyOperationCompleted;
        
        private System.Threading.SendOrPostCallback FNUpdateDocumentPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback FNFileDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FNUnfileDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FNDeleteDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FNFindDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FNFindDocumentFoldersOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DMSService() {
            this.Url = global::Validus.Console.Properties.Settings.Default.Validus_Console_DocumentManagementService_DMSService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event GetUWDocumentsCompletedEventHandler GetUWDocumentsCompleted;
        
        /// <remarks/>
        public event GetUWDocumentsByObjectCompletedEventHandler GetUWDocumentsByObjectCompleted;
        
        /// <remarks/>
        public event GetUWDocumentByIDCompletedEventHandler GetUWDocumentByIDCompleted;
        
        /// <remarks/>
        public event JSONGetUWDocumentsCompletedEventHandler JSONGetUWDocumentsCompleted;
        
        /// <remarks/>
        public event JSONGetUWDocumentsByObjectCompletedEventHandler JSONGetUWDocumentsByObjectCompleted;
        
        /// <remarks/>
        public event JSONGetUWDocumentByIDCompletedEventHandler JSONGetUWDocumentByIDCompleted;
        
        /// <remarks/>
        public event GetDMSDocumentsCompletedEventHandler GetDMSDocumentsCompleted;
        
        /// <remarks/>
        public event GetDMSUWDocumentsCompletedEventHandler GetDMSUWDocumentsCompleted;
        
        /// <remarks/>
        public event GetITDocumentsCompletedEventHandler GetITDocumentsCompleted;
        
        /// <remarks/>
        public event GetITDocumentsByObjectCompletedEventHandler GetITDocumentsByObjectCompleted;
        
        /// <remarks/>
        public event GetITDocumentByIDCompletedEventHandler GetITDocumentByIDCompleted;
        
        /// <remarks/>
        public event JSONGetITDocumentsCompletedEventHandler JSONGetITDocumentsCompleted;
        
        /// <remarks/>
        public event JSONGetITDocumentsByObjectCompletedEventHandler JSONGetITDocumentsByObjectCompleted;
        
        /// <remarks/>
        public event JSONGetITDocumentByIDCompletedEventHandler JSONGetITDocumentByIDCompleted;
        
        /// <remarks/>
        public event GetURSLDocumentsCompletedEventHandler GetURSLDocumentsCompleted;
        
        /// <remarks/>
        public event GetURSLDocumentsByObjectCompletedEventHandler GetURSLDocumentsByObjectCompleted;
        
        /// <remarks/>
        public event GetURSLDocumentsByIDCompletedEventHandler GetURSLDocumentsByIDCompleted;
        
        /// <remarks/>
        public event JSONGetURSLDocumentsCompletedEventHandler JSONGetURSLDocumentsCompleted;
        
        /// <remarks/>
        public event JSONGetURSLDocumentsByObjectCompletedEventHandler JSONGetURSLDocumentsByObjectCompleted;
        
        /// <remarks/>
        public event JSONGetURSLDocumentsByIDCompletedEventHandler JSONGetURSLDocumentsByIDCompleted;
        
        /// <remarks/>
        public event GetComplianceDocumentsCompletedEventHandler GetComplianceDocumentsCompleted;
        
        /// <remarks/>
        public event GetComplianceDocumentsByObjectCompletedEventHandler GetComplianceDocumentsByObjectCompleted;
        
        /// <remarks/>
        public event GetComplianceDocumentsByIDCompletedEventHandler GetComplianceDocumentsByIDCompleted;
        
        /// <remarks/>
        public event JSONGetComplianceDocumentsCompletedEventHandler JSONGetComplianceDocumentsCompleted;
        
        /// <remarks/>
        public event JSONGetComplianceDocumentsByObjectCompletedEventHandler JSONGetComplianceDocumentsByObjectCompleted;
        
        /// <remarks/>
        public event JSONGetComplianceDocumentsByIDCompletedEventHandler JSONGetComplianceDocumentsByIDCompleted;
        
        /// <remarks/>
        public event FNUploadDocumentCompletedEventHandler FNUploadDocumentCompleted;
        
        /// <remarks/>
        public event FNUpdateDocumentPropertyCompletedEventHandler FNUpdateDocumentPropertyCompleted;
        
        /// <remarks/>
        public event FNUpdateDocumentPropertiesCompletedEventHandler FNUpdateDocumentPropertiesCompleted;
        
        /// <remarks/>
        public event FNFileDocumentCompletedEventHandler FNFileDocumentCompleted;
        
        /// <remarks/>
        public event FNUnfileDocumentCompletedEventHandler FNUnfileDocumentCompleted;
        
        /// <remarks/>
        public event FNDeleteDocumentCompletedEventHandler FNDeleteDocumentCompleted;
        
        /// <remarks/>
        public event FNFindDocumentCompletedEventHandler FNFindDocumentCompleted;
        
        /// <remarks/>
        public event FNFindDocumentFoldersCompletedEventHandler FNFindDocumentFoldersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/HelloWorld", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld() {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync() {
            this.HelloWorldAsync(null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[0], this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetUWDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetUWDocuments(
                    int rowLimit, 
                    bool isDetailed, 
                    string objectID, 
                    string policyID, 
                    string policyIDCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentType, 
                    string description, 
                    string descriptionCondition, 
                    string indexPerson, 
                    string indexPersonCondition, 
                    string accountingYear, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string underwriter, 
                    string underwriterCondition, 
                    string classOfBusiness, 
                    string status, 
                    string entryStatus, 
                    string workflowStatus, 
                    string inceptionFromDate, 
                    string inceptionToDate, 
                    string writtenFromDate, 
                    string writtenToDate, 
                    string opsInfo, 
                    string createdBy, 
                    string createdByCondition, 
                    string createdFromDate, 
                    string createdToDate) {
            object[] results = this.Invoke("GetUWDocuments", new object[] {
                        rowLimit,
                        isDetailed,
                        objectID,
                        policyID,
                        policyIDCondition,
                        documentTitle,
                        documentTitleCondition,
                        documentType,
                        description,
                        descriptionCondition,
                        indexPerson,
                        indexPersonCondition,
                        accountingYear,
                        insuredName,
                        insuredNameCondition,
                        underwriter,
                        underwriterCondition,
                        classOfBusiness,
                        status,
                        entryStatus,
                        workflowStatus,
                        inceptionFromDate,
                        inceptionToDate,
                        writtenFromDate,
                        writtenToDate,
                        opsInfo,
                        createdBy,
                        createdByCondition,
                        createdFromDate,
                        createdToDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetUWDocumentsAsync(
                    int rowLimit, 
                    bool isDetailed, 
                    string objectID, 
                    string policyID, 
                    string policyIDCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentType, 
                    string description, 
                    string descriptionCondition, 
                    string indexPerson, 
                    string indexPersonCondition, 
                    string accountingYear, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string underwriter, 
                    string underwriterCondition, 
                    string classOfBusiness, 
                    string status, 
                    string entryStatus, 
                    string workflowStatus, 
                    string inceptionFromDate, 
                    string inceptionToDate, 
                    string writtenFromDate, 
                    string writtenToDate, 
                    string opsInfo, 
                    string createdBy, 
                    string createdByCondition, 
                    string createdFromDate, 
                    string createdToDate) {
            this.GetUWDocumentsAsync(rowLimit, isDetailed, objectID, policyID, policyIDCondition, documentTitle, documentTitleCondition, documentType, description, descriptionCondition, indexPerson, indexPersonCondition, accountingYear, insuredName, insuredNameCondition, underwriter, underwriterCondition, classOfBusiness, status, entryStatus, workflowStatus, inceptionFromDate, inceptionToDate, writtenFromDate, writtenToDate, opsInfo, createdBy, createdByCondition, createdFromDate, createdToDate, null);
        }
        
        /// <remarks/>
        public void GetUWDocumentsAsync(
                    int rowLimit, 
                    bool isDetailed, 
                    string objectID, 
                    string policyID, 
                    string policyIDCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentType, 
                    string description, 
                    string descriptionCondition, 
                    string indexPerson, 
                    string indexPersonCondition, 
                    string accountingYear, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string underwriter, 
                    string underwriterCondition, 
                    string classOfBusiness, 
                    string status, 
                    string entryStatus, 
                    string workflowStatus, 
                    string inceptionFromDate, 
                    string inceptionToDate, 
                    string writtenFromDate, 
                    string writtenToDate, 
                    string opsInfo, 
                    string createdBy, 
                    string createdByCondition, 
                    string createdFromDate, 
                    string createdToDate, 
                    object userState) {
            if ((this.GetUWDocumentsOperationCompleted == null)) {
                this.GetUWDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUWDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetUWDocuments", new object[] {
                        rowLimit,
                        isDetailed,
                        objectID,
                        policyID,
                        policyIDCondition,
                        documentTitle,
                        documentTitleCondition,
                        documentType,
                        description,
                        descriptionCondition,
                        indexPerson,
                        indexPersonCondition,
                        accountingYear,
                        insuredName,
                        insuredNameCondition,
                        underwriter,
                        underwriterCondition,
                        classOfBusiness,
                        status,
                        entryStatus,
                        workflowStatus,
                        inceptionFromDate,
                        inceptionToDate,
                        writtenFromDate,
                        writtenToDate,
                        opsInfo,
                        createdBy,
                        createdByCondition,
                        createdFromDate,
                        createdToDate}, this.GetUWDocumentsOperationCompleted, userState);
        }
        
        private void OnGetUWDocumentsOperationCompleted(object arg) {
            if ((this.GetUWDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUWDocumentsCompleted(this, new GetUWDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetUWDocumentsByObject", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetUWDocumentsByObject(UWDocument uwDocument) {
            object[] results = this.Invoke("GetUWDocumentsByObject", new object[] {
                        uwDocument});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetUWDocumentsByObjectAsync(UWDocument uwDocument) {
            this.GetUWDocumentsByObjectAsync(uwDocument, null);
        }
        
        /// <remarks/>
        public void GetUWDocumentsByObjectAsync(UWDocument uwDocument, object userState) {
            if ((this.GetUWDocumentsByObjectOperationCompleted == null)) {
                this.GetUWDocumentsByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUWDocumentsByObjectOperationCompleted);
            }
            this.InvokeAsync("GetUWDocumentsByObject", new object[] {
                        uwDocument}, this.GetUWDocumentsByObjectOperationCompleted, userState);
        }
        
        private void OnGetUWDocumentsByObjectOperationCompleted(object arg) {
            if ((this.GetUWDocumentsByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUWDocumentsByObjectCompleted(this, new GetUWDocumentsByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetUWDocumentByID", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetUWDocumentByID(string objectID) {
            object[] results = this.Invoke("GetUWDocumentByID", new object[] {
                        objectID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetUWDocumentByIDAsync(string objectID) {
            this.GetUWDocumentByIDAsync(objectID, null);
        }
        
        /// <remarks/>
        public void GetUWDocumentByIDAsync(string objectID, object userState) {
            if ((this.GetUWDocumentByIDOperationCompleted == null)) {
                this.GetUWDocumentByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUWDocumentByIDOperationCompleted);
            }
            this.InvokeAsync("GetUWDocumentByID", new object[] {
                        objectID}, this.GetUWDocumentByIDOperationCompleted, userState);
        }
        
        private void OnGetUWDocumentByIDOperationCompleted(object arg) {
            if ((this.GetUWDocumentByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUWDocumentByIDCompleted(this, new GetUWDocumentByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetUWDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetUWDocuments(
                    int rowLimit, 
                    bool isDetailed, 
                    string objectID, 
                    string policyID, 
                    string policyIDCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentType, 
                    string description, 
                    string descriptionCondition, 
                    string indexPerson, 
                    string indexPersonCondition, 
                    string accountingYear, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string underwriter, 
                    string underwriterCondition, 
                    string classOfBusiness, 
                    string status, 
                    string entryStatus, 
                    string workflowStatus, 
                    string inceptionFromDate, 
                    string inceptionToDate, 
                    string writtenFromDate, 
                    string writtenToDate, 
                    string opsInfo, 
                    string createdBy, 
                    string createdByCondition, 
                    string createdFromDate, 
                    string createdToDate) {
            object[] results = this.Invoke("JSONGetUWDocuments", new object[] {
                        rowLimit,
                        isDetailed,
                        objectID,
                        policyID,
                        policyIDCondition,
                        documentTitle,
                        documentTitleCondition,
                        documentType,
                        description,
                        descriptionCondition,
                        indexPerson,
                        indexPersonCondition,
                        accountingYear,
                        insuredName,
                        insuredNameCondition,
                        underwriter,
                        underwriterCondition,
                        classOfBusiness,
                        status,
                        entryStatus,
                        workflowStatus,
                        inceptionFromDate,
                        inceptionToDate,
                        writtenFromDate,
                        writtenToDate,
                        opsInfo,
                        createdBy,
                        createdByCondition,
                        createdFromDate,
                        createdToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetUWDocumentsAsync(
                    int rowLimit, 
                    bool isDetailed, 
                    string objectID, 
                    string policyID, 
                    string policyIDCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentType, 
                    string description, 
                    string descriptionCondition, 
                    string indexPerson, 
                    string indexPersonCondition, 
                    string accountingYear, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string underwriter, 
                    string underwriterCondition, 
                    string classOfBusiness, 
                    string status, 
                    string entryStatus, 
                    string workflowStatus, 
                    string inceptionFromDate, 
                    string inceptionToDate, 
                    string writtenFromDate, 
                    string writtenToDate, 
                    string opsInfo, 
                    string createdBy, 
                    string createdByCondition, 
                    string createdFromDate, 
                    string createdToDate) {
            this.JSONGetUWDocumentsAsync(rowLimit, isDetailed, objectID, policyID, policyIDCondition, documentTitle, documentTitleCondition, documentType, description, descriptionCondition, indexPerson, indexPersonCondition, accountingYear, insuredName, insuredNameCondition, underwriter, underwriterCondition, classOfBusiness, status, entryStatus, workflowStatus, inceptionFromDate, inceptionToDate, writtenFromDate, writtenToDate, opsInfo, createdBy, createdByCondition, createdFromDate, createdToDate, null);
        }
        
        /// <remarks/>
        public void JSONGetUWDocumentsAsync(
                    int rowLimit, 
                    bool isDetailed, 
                    string objectID, 
                    string policyID, 
                    string policyIDCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentType, 
                    string description, 
                    string descriptionCondition, 
                    string indexPerson, 
                    string indexPersonCondition, 
                    string accountingYear, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string underwriter, 
                    string underwriterCondition, 
                    string classOfBusiness, 
                    string status, 
                    string entryStatus, 
                    string workflowStatus, 
                    string inceptionFromDate, 
                    string inceptionToDate, 
                    string writtenFromDate, 
                    string writtenToDate, 
                    string opsInfo, 
                    string createdBy, 
                    string createdByCondition, 
                    string createdFromDate, 
                    string createdToDate, 
                    object userState) {
            if ((this.JSONGetUWDocumentsOperationCompleted == null)) {
                this.JSONGetUWDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetUWDocumentsOperationCompleted);
            }
            this.InvokeAsync("JSONGetUWDocuments", new object[] {
                        rowLimit,
                        isDetailed,
                        objectID,
                        policyID,
                        policyIDCondition,
                        documentTitle,
                        documentTitleCondition,
                        documentType,
                        description,
                        descriptionCondition,
                        indexPerson,
                        indexPersonCondition,
                        accountingYear,
                        insuredName,
                        insuredNameCondition,
                        underwriter,
                        underwriterCondition,
                        classOfBusiness,
                        status,
                        entryStatus,
                        workflowStatus,
                        inceptionFromDate,
                        inceptionToDate,
                        writtenFromDate,
                        writtenToDate,
                        opsInfo,
                        createdBy,
                        createdByCondition,
                        createdFromDate,
                        createdToDate}, this.JSONGetUWDocumentsOperationCompleted, userState);
        }
        
        private void OnJSONGetUWDocumentsOperationCompleted(object arg) {
            if ((this.JSONGetUWDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetUWDocumentsCompleted(this, new JSONGetUWDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetUWDocumentsByObject", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetUWDocumentsByObject(UWDocument uwDocument) {
            object[] results = this.Invoke("JSONGetUWDocumentsByObject", new object[] {
                        uwDocument});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetUWDocumentsByObjectAsync(UWDocument uwDocument) {
            this.JSONGetUWDocumentsByObjectAsync(uwDocument, null);
        }
        
        /// <remarks/>
        public void JSONGetUWDocumentsByObjectAsync(UWDocument uwDocument, object userState) {
            if ((this.JSONGetUWDocumentsByObjectOperationCompleted == null)) {
                this.JSONGetUWDocumentsByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetUWDocumentsByObjectOperationCompleted);
            }
            this.InvokeAsync("JSONGetUWDocumentsByObject", new object[] {
                        uwDocument}, this.JSONGetUWDocumentsByObjectOperationCompleted, userState);
        }
        
        private void OnJSONGetUWDocumentsByObjectOperationCompleted(object arg) {
            if ((this.JSONGetUWDocumentsByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetUWDocumentsByObjectCompleted(this, new JSONGetUWDocumentsByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetUWDocumentByID", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetUWDocumentByID(string objectID) {
            object[] results = this.Invoke("JSONGetUWDocumentByID", new object[] {
                        objectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetUWDocumentByIDAsync(string objectID) {
            this.JSONGetUWDocumentByIDAsync(objectID, null);
        }
        
        /// <remarks/>
        public void JSONGetUWDocumentByIDAsync(string objectID, object userState) {
            if ((this.JSONGetUWDocumentByIDOperationCompleted == null)) {
                this.JSONGetUWDocumentByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetUWDocumentByIDOperationCompleted);
            }
            this.InvokeAsync("JSONGetUWDocumentByID", new object[] {
                        objectID}, this.JSONGetUWDocumentByIDOperationCompleted, userState);
        }
        
        private void OnJSONGetUWDocumentByIDOperationCompleted(object arg) {
            if ((this.JSONGetUWDocumentByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetUWDocumentByIDCompleted(this, new JSONGetUWDocumentByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetDMSDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocVersion[] GetDMSDocuments(string PolicyID, string DocumentType, string Underwriter, string InsuredName, string PolicyIDCondition, string FromDate, string ToDate) {
            object[] results = this.Invoke("GetDMSDocuments", new object[] {
                        PolicyID,
                        DocumentType,
                        Underwriter,
                        InsuredName,
                        PolicyIDCondition,
                        FromDate,
                        ToDate});
            return ((DocVersion[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDMSDocumentsAsync(string PolicyID, string DocumentType, string Underwriter, string InsuredName, string PolicyIDCondition, string FromDate, string ToDate) {
            this.GetDMSDocumentsAsync(PolicyID, DocumentType, Underwriter, InsuredName, PolicyIDCondition, FromDate, ToDate, null);
        }
        
        /// <remarks/>
        public void GetDMSDocumentsAsync(string PolicyID, string DocumentType, string Underwriter, string InsuredName, string PolicyIDCondition, string FromDate, string ToDate, object userState) {
            if ((this.GetDMSDocumentsOperationCompleted == null)) {
                this.GetDMSDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDMSDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetDMSDocuments", new object[] {
                        PolicyID,
                        DocumentType,
                        Underwriter,
                        InsuredName,
                        PolicyIDCondition,
                        FromDate,
                        ToDate}, this.GetDMSDocumentsOperationCompleted, userState);
        }
        
        private void OnGetDMSDocumentsOperationCompleted(object arg) {
            if ((this.GetDMSDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDMSDocumentsCompleted(this, new GetDMSDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetDMSUWDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetDMSUWDocuments(string policyID, string policyIDCondition, string documentType, string underwriter, string insuredName, string createdFromDate, string createdToDate) {
            object[] results = this.Invoke("GetDMSUWDocuments", new object[] {
                        policyID,
                        policyIDCondition,
                        documentType,
                        underwriter,
                        insuredName,
                        createdFromDate,
                        createdToDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetDMSUWDocumentsAsync(string policyID, string policyIDCondition, string documentType, string underwriter, string insuredName, string createdFromDate, string createdToDate) {
            this.GetDMSUWDocumentsAsync(policyID, policyIDCondition, documentType, underwriter, insuredName, createdFromDate, createdToDate, null);
        }
        
        /// <remarks/>
        public void GetDMSUWDocumentsAsync(string policyID, string policyIDCondition, string documentType, string underwriter, string insuredName, string createdFromDate, string createdToDate, object userState) {
            if ((this.GetDMSUWDocumentsOperationCompleted == null)) {
                this.GetDMSUWDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDMSUWDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetDMSUWDocuments", new object[] {
                        policyID,
                        policyIDCondition,
                        documentType,
                        underwriter,
                        insuredName,
                        createdFromDate,
                        createdToDate}, this.GetDMSUWDocumentsOperationCompleted, userState);
        }
        
        private void OnGetDMSUWDocumentsOperationCompleted(object arg) {
            if ((this.GetDMSUWDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDMSUWDocumentsCompleted(this, new GetDMSUWDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetITDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetITDocuments(
                    int searchType, 
                    int rowLimit, 
                    string capacityFormType, 
                    string completedBy, 
                    string completedByCondition, 
                    string securityFormType, 
                    string userName, 
                    string userNameCondition, 
                    string description, 
                    string descriptionCondition, 
                    string formDate, 
                    string manufacturer, 
                    string manufacturerCondition, 
                    string softwareName, 
                    string softwareNameCondition, 
                    string versionNumber, 
                    string versionNumberCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentDate, 
                    string createdFromDate, 
                    string createdToDate) {
            object[] results = this.Invoke("GetITDocuments", new object[] {
                        searchType,
                        rowLimit,
                        capacityFormType,
                        completedBy,
                        completedByCondition,
                        securityFormType,
                        userName,
                        userNameCondition,
                        description,
                        descriptionCondition,
                        formDate,
                        manufacturer,
                        manufacturerCondition,
                        softwareName,
                        softwareNameCondition,
                        versionNumber,
                        versionNumberCondition,
                        documentTitle,
                        documentTitleCondition,
                        documentDate,
                        createdFromDate,
                        createdToDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetITDocumentsAsync(
                    int searchType, 
                    int rowLimit, 
                    string capacityFormType, 
                    string completedBy, 
                    string completedByCondition, 
                    string securityFormType, 
                    string userName, 
                    string userNameCondition, 
                    string description, 
                    string descriptionCondition, 
                    string formDate, 
                    string manufacturer, 
                    string manufacturerCondition, 
                    string softwareName, 
                    string softwareNameCondition, 
                    string versionNumber, 
                    string versionNumberCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentDate, 
                    string createdFromDate, 
                    string createdToDate) {
            this.GetITDocumentsAsync(searchType, rowLimit, capacityFormType, completedBy, completedByCondition, securityFormType, userName, userNameCondition, description, descriptionCondition, formDate, manufacturer, manufacturerCondition, softwareName, softwareNameCondition, versionNumber, versionNumberCondition, documentTitle, documentTitleCondition, documentDate, createdFromDate, createdToDate, null);
        }
        
        /// <remarks/>
        public void GetITDocumentsAsync(
                    int searchType, 
                    int rowLimit, 
                    string capacityFormType, 
                    string completedBy, 
                    string completedByCondition, 
                    string securityFormType, 
                    string userName, 
                    string userNameCondition, 
                    string description, 
                    string descriptionCondition, 
                    string formDate, 
                    string manufacturer, 
                    string manufacturerCondition, 
                    string softwareName, 
                    string softwareNameCondition, 
                    string versionNumber, 
                    string versionNumberCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentDate, 
                    string createdFromDate, 
                    string createdToDate, 
                    object userState) {
            if ((this.GetITDocumentsOperationCompleted == null)) {
                this.GetITDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetITDocuments", new object[] {
                        searchType,
                        rowLimit,
                        capacityFormType,
                        completedBy,
                        completedByCondition,
                        securityFormType,
                        userName,
                        userNameCondition,
                        description,
                        descriptionCondition,
                        formDate,
                        manufacturer,
                        manufacturerCondition,
                        softwareName,
                        softwareNameCondition,
                        versionNumber,
                        versionNumberCondition,
                        documentTitle,
                        documentTitleCondition,
                        documentDate,
                        createdFromDate,
                        createdToDate}, this.GetITDocumentsOperationCompleted, userState);
        }
        
        private void OnGetITDocumentsOperationCompleted(object arg) {
            if ((this.GetITDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITDocumentsCompleted(this, new GetITDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetITDocumentsByObject", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetITDocumentsByObject(ITDocument itDocument) {
            object[] results = this.Invoke("GetITDocumentsByObject", new object[] {
                        itDocument});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetITDocumentsByObjectAsync(ITDocument itDocument) {
            this.GetITDocumentsByObjectAsync(itDocument, null);
        }
        
        /// <remarks/>
        public void GetITDocumentsByObjectAsync(ITDocument itDocument, object userState) {
            if ((this.GetITDocumentsByObjectOperationCompleted == null)) {
                this.GetITDocumentsByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITDocumentsByObjectOperationCompleted);
            }
            this.InvokeAsync("GetITDocumentsByObject", new object[] {
                        itDocument}, this.GetITDocumentsByObjectOperationCompleted, userState);
        }
        
        private void OnGetITDocumentsByObjectOperationCompleted(object arg) {
            if ((this.GetITDocumentsByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITDocumentsByObjectCompleted(this, new GetITDocumentsByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetITDocumentByID", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetITDocumentByID(string objectID) {
            object[] results = this.Invoke("GetITDocumentByID", new object[] {
                        objectID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetITDocumentByIDAsync(string objectID) {
            this.GetITDocumentByIDAsync(objectID, null);
        }
        
        /// <remarks/>
        public void GetITDocumentByIDAsync(string objectID, object userState) {
            if ((this.GetITDocumentByIDOperationCompleted == null)) {
                this.GetITDocumentByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITDocumentByIDOperationCompleted);
            }
            this.InvokeAsync("GetITDocumentByID", new object[] {
                        objectID}, this.GetITDocumentByIDOperationCompleted, userState);
        }
        
        private void OnGetITDocumentByIDOperationCompleted(object arg) {
            if ((this.GetITDocumentByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITDocumentByIDCompleted(this, new GetITDocumentByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetITDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetITDocuments(
                    int searchType, 
                    int rowLimit, 
                    string capacityFormType, 
                    string completedBy, 
                    string completedByCondition, 
                    string securityFormType, 
                    string userName, 
                    string userNameCondition, 
                    string description, 
                    string descriptionCondition, 
                    string formDate, 
                    string manufacturer, 
                    string manufacturerCondition, 
                    string softwareName, 
                    string softwareNameCondition, 
                    string versionNumber, 
                    string versionNumberCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentDate, 
                    string createdFromDate, 
                    string createdToDate) {
            object[] results = this.Invoke("JSONGetITDocuments", new object[] {
                        searchType,
                        rowLimit,
                        capacityFormType,
                        completedBy,
                        completedByCondition,
                        securityFormType,
                        userName,
                        userNameCondition,
                        description,
                        descriptionCondition,
                        formDate,
                        manufacturer,
                        manufacturerCondition,
                        softwareName,
                        softwareNameCondition,
                        versionNumber,
                        versionNumberCondition,
                        documentTitle,
                        documentTitleCondition,
                        documentDate,
                        createdFromDate,
                        createdToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetITDocumentsAsync(
                    int searchType, 
                    int rowLimit, 
                    string capacityFormType, 
                    string completedBy, 
                    string completedByCondition, 
                    string securityFormType, 
                    string userName, 
                    string userNameCondition, 
                    string description, 
                    string descriptionCondition, 
                    string formDate, 
                    string manufacturer, 
                    string manufacturerCondition, 
                    string softwareName, 
                    string softwareNameCondition, 
                    string versionNumber, 
                    string versionNumberCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentDate, 
                    string createdFromDate, 
                    string createdToDate) {
            this.JSONGetITDocumentsAsync(searchType, rowLimit, capacityFormType, completedBy, completedByCondition, securityFormType, userName, userNameCondition, description, descriptionCondition, formDate, manufacturer, manufacturerCondition, softwareName, softwareNameCondition, versionNumber, versionNumberCondition, documentTitle, documentTitleCondition, documentDate, createdFromDate, createdToDate, null);
        }
        
        /// <remarks/>
        public void JSONGetITDocumentsAsync(
                    int searchType, 
                    int rowLimit, 
                    string capacityFormType, 
                    string completedBy, 
                    string completedByCondition, 
                    string securityFormType, 
                    string userName, 
                    string userNameCondition, 
                    string description, 
                    string descriptionCondition, 
                    string formDate, 
                    string manufacturer, 
                    string manufacturerCondition, 
                    string softwareName, 
                    string softwareNameCondition, 
                    string versionNumber, 
                    string versionNumberCondition, 
                    string documentTitle, 
                    string documentTitleCondition, 
                    string documentDate, 
                    string createdFromDate, 
                    string createdToDate, 
                    object userState) {
            if ((this.JSONGetITDocumentsOperationCompleted == null)) {
                this.JSONGetITDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetITDocumentsOperationCompleted);
            }
            this.InvokeAsync("JSONGetITDocuments", new object[] {
                        searchType,
                        rowLimit,
                        capacityFormType,
                        completedBy,
                        completedByCondition,
                        securityFormType,
                        userName,
                        userNameCondition,
                        description,
                        descriptionCondition,
                        formDate,
                        manufacturer,
                        manufacturerCondition,
                        softwareName,
                        softwareNameCondition,
                        versionNumber,
                        versionNumberCondition,
                        documentTitle,
                        documentTitleCondition,
                        documentDate,
                        createdFromDate,
                        createdToDate}, this.JSONGetITDocumentsOperationCompleted, userState);
        }
        
        private void OnJSONGetITDocumentsOperationCompleted(object arg) {
            if ((this.JSONGetITDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetITDocumentsCompleted(this, new JSONGetITDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetITDocumentsByObject", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetITDocumentsByObject(ITDocument itDocument) {
            object[] results = this.Invoke("JSONGetITDocumentsByObject", new object[] {
                        itDocument});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetITDocumentsByObjectAsync(ITDocument itDocument) {
            this.JSONGetITDocumentsByObjectAsync(itDocument, null);
        }
        
        /// <remarks/>
        public void JSONGetITDocumentsByObjectAsync(ITDocument itDocument, object userState) {
            if ((this.JSONGetITDocumentsByObjectOperationCompleted == null)) {
                this.JSONGetITDocumentsByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetITDocumentsByObjectOperationCompleted);
            }
            this.InvokeAsync("JSONGetITDocumentsByObject", new object[] {
                        itDocument}, this.JSONGetITDocumentsByObjectOperationCompleted, userState);
        }
        
        private void OnJSONGetITDocumentsByObjectOperationCompleted(object arg) {
            if ((this.JSONGetITDocumentsByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetITDocumentsByObjectCompleted(this, new JSONGetITDocumentsByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetITDocumentByID", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetITDocumentByID(string objectID) {
            object[] results = this.Invoke("JSONGetITDocumentByID", new object[] {
                        objectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetITDocumentByIDAsync(string objectID) {
            this.JSONGetITDocumentByIDAsync(objectID, null);
        }
        
        /// <remarks/>
        public void JSONGetITDocumentByIDAsync(string objectID, object userState) {
            if ((this.JSONGetITDocumentByIDOperationCompleted == null)) {
                this.JSONGetITDocumentByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetITDocumentByIDOperationCompleted);
            }
            this.InvokeAsync("JSONGetITDocumentByID", new object[] {
                        objectID}, this.JSONGetITDocumentByIDOperationCompleted, userState);
        }
        
        private void OnJSONGetITDocumentByIDOperationCompleted(object arg) {
            if ((this.JSONGetITDocumentByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetITDocumentByIDCompleted(this, new JSONGetITDocumentByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetURSLDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetURSLDocuments(
                    int rowLimit, 
                    string documentType, 
                    string certificateNumber, 
                    string certificateNumberCondition, 
                    string claimNumber, 
                    string claimNumberCondition, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string insuredProperty, 
                    string insuredPropertyCondition, 
                    string description, 
                    string descriptionCondition, 
                    string boxName, 
                    string pageNumber, 
                    string dateInputFrom, 
                    string dateInputTo, 
                    string createdFromDate, 
                    string createdToDate) {
            object[] results = this.Invoke("GetURSLDocuments", new object[] {
                        rowLimit,
                        documentType,
                        certificateNumber,
                        certificateNumberCondition,
                        claimNumber,
                        claimNumberCondition,
                        insuredName,
                        insuredNameCondition,
                        insuredProperty,
                        insuredPropertyCondition,
                        description,
                        descriptionCondition,
                        boxName,
                        pageNumber,
                        dateInputFrom,
                        dateInputTo,
                        createdFromDate,
                        createdToDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetURSLDocumentsAsync(
                    int rowLimit, 
                    string documentType, 
                    string certificateNumber, 
                    string certificateNumberCondition, 
                    string claimNumber, 
                    string claimNumberCondition, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string insuredProperty, 
                    string insuredPropertyCondition, 
                    string description, 
                    string descriptionCondition, 
                    string boxName, 
                    string pageNumber, 
                    string dateInputFrom, 
                    string dateInputTo, 
                    string createdFromDate, 
                    string createdToDate) {
            this.GetURSLDocumentsAsync(rowLimit, documentType, certificateNumber, certificateNumberCondition, claimNumber, claimNumberCondition, insuredName, insuredNameCondition, insuredProperty, insuredPropertyCondition, description, descriptionCondition, boxName, pageNumber, dateInputFrom, dateInputTo, createdFromDate, createdToDate, null);
        }
        
        /// <remarks/>
        public void GetURSLDocumentsAsync(
                    int rowLimit, 
                    string documentType, 
                    string certificateNumber, 
                    string certificateNumberCondition, 
                    string claimNumber, 
                    string claimNumberCondition, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string insuredProperty, 
                    string insuredPropertyCondition, 
                    string description, 
                    string descriptionCondition, 
                    string boxName, 
                    string pageNumber, 
                    string dateInputFrom, 
                    string dateInputTo, 
                    string createdFromDate, 
                    string createdToDate, 
                    object userState) {
            if ((this.GetURSLDocumentsOperationCompleted == null)) {
                this.GetURSLDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetURSLDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetURSLDocuments", new object[] {
                        rowLimit,
                        documentType,
                        certificateNumber,
                        certificateNumberCondition,
                        claimNumber,
                        claimNumberCondition,
                        insuredName,
                        insuredNameCondition,
                        insuredProperty,
                        insuredPropertyCondition,
                        description,
                        descriptionCondition,
                        boxName,
                        pageNumber,
                        dateInputFrom,
                        dateInputTo,
                        createdFromDate,
                        createdToDate}, this.GetURSLDocumentsOperationCompleted, userState);
        }
        
        private void OnGetURSLDocumentsOperationCompleted(object arg) {
            if ((this.GetURSLDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetURSLDocumentsCompleted(this, new GetURSLDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetURSLDocumentsByObject", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetURSLDocumentsByObject(URSLDocument urslDocument) {
            object[] results = this.Invoke("GetURSLDocumentsByObject", new object[] {
                        urslDocument});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetURSLDocumentsByObjectAsync(URSLDocument urslDocument) {
            this.GetURSLDocumentsByObjectAsync(urslDocument, null);
        }
        
        /// <remarks/>
        public void GetURSLDocumentsByObjectAsync(URSLDocument urslDocument, object userState) {
            if ((this.GetURSLDocumentsByObjectOperationCompleted == null)) {
                this.GetURSLDocumentsByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetURSLDocumentsByObjectOperationCompleted);
            }
            this.InvokeAsync("GetURSLDocumentsByObject", new object[] {
                        urslDocument}, this.GetURSLDocumentsByObjectOperationCompleted, userState);
        }
        
        private void OnGetURSLDocumentsByObjectOperationCompleted(object arg) {
            if ((this.GetURSLDocumentsByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetURSLDocumentsByObjectCompleted(this, new GetURSLDocumentsByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetURSLDocumentsByID", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetURSLDocumentsByID(string objectID) {
            object[] results = this.Invoke("GetURSLDocumentsByID", new object[] {
                        objectID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetURSLDocumentsByIDAsync(string objectID) {
            this.GetURSLDocumentsByIDAsync(objectID, null);
        }
        
        /// <remarks/>
        public void GetURSLDocumentsByIDAsync(string objectID, object userState) {
            if ((this.GetURSLDocumentsByIDOperationCompleted == null)) {
                this.GetURSLDocumentsByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetURSLDocumentsByIDOperationCompleted);
            }
            this.InvokeAsync("GetURSLDocumentsByID", new object[] {
                        objectID}, this.GetURSLDocumentsByIDOperationCompleted, userState);
        }
        
        private void OnGetURSLDocumentsByIDOperationCompleted(object arg) {
            if ((this.GetURSLDocumentsByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetURSLDocumentsByIDCompleted(this, new GetURSLDocumentsByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetURSLDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetURSLDocuments(
                    int rowLimit, 
                    string documentType, 
                    string certificateNumber, 
                    string certificateNumberCondition, 
                    string claimNumber, 
                    string claimNumberCondition, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string insuredProperty, 
                    string insuredPropertyCondition, 
                    string description, 
                    string descriptionCondition, 
                    string boxName, 
                    string pageNumber, 
                    string dateInputFrom, 
                    string dateInputTo, 
                    string createdFromDate, 
                    string createdToDate) {
            object[] results = this.Invoke("JSONGetURSLDocuments", new object[] {
                        rowLimit,
                        documentType,
                        certificateNumber,
                        certificateNumberCondition,
                        claimNumber,
                        claimNumberCondition,
                        insuredName,
                        insuredNameCondition,
                        insuredProperty,
                        insuredPropertyCondition,
                        description,
                        descriptionCondition,
                        boxName,
                        pageNumber,
                        dateInputFrom,
                        dateInputTo,
                        createdFromDate,
                        createdToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetURSLDocumentsAsync(
                    int rowLimit, 
                    string documentType, 
                    string certificateNumber, 
                    string certificateNumberCondition, 
                    string claimNumber, 
                    string claimNumberCondition, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string insuredProperty, 
                    string insuredPropertyCondition, 
                    string description, 
                    string descriptionCondition, 
                    string boxName, 
                    string pageNumber, 
                    string dateInputFrom, 
                    string dateInputTo, 
                    string createdFromDate, 
                    string createdToDate) {
            this.JSONGetURSLDocumentsAsync(rowLimit, documentType, certificateNumber, certificateNumberCondition, claimNumber, claimNumberCondition, insuredName, insuredNameCondition, insuredProperty, insuredPropertyCondition, description, descriptionCondition, boxName, pageNumber, dateInputFrom, dateInputTo, createdFromDate, createdToDate, null);
        }
        
        /// <remarks/>
        public void JSONGetURSLDocumentsAsync(
                    int rowLimit, 
                    string documentType, 
                    string certificateNumber, 
                    string certificateNumberCondition, 
                    string claimNumber, 
                    string claimNumberCondition, 
                    string insuredName, 
                    string insuredNameCondition, 
                    string insuredProperty, 
                    string insuredPropertyCondition, 
                    string description, 
                    string descriptionCondition, 
                    string boxName, 
                    string pageNumber, 
                    string dateInputFrom, 
                    string dateInputTo, 
                    string createdFromDate, 
                    string createdToDate, 
                    object userState) {
            if ((this.JSONGetURSLDocumentsOperationCompleted == null)) {
                this.JSONGetURSLDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetURSLDocumentsOperationCompleted);
            }
            this.InvokeAsync("JSONGetURSLDocuments", new object[] {
                        rowLimit,
                        documentType,
                        certificateNumber,
                        certificateNumberCondition,
                        claimNumber,
                        claimNumberCondition,
                        insuredName,
                        insuredNameCondition,
                        insuredProperty,
                        insuredPropertyCondition,
                        description,
                        descriptionCondition,
                        boxName,
                        pageNumber,
                        dateInputFrom,
                        dateInputTo,
                        createdFromDate,
                        createdToDate}, this.JSONGetURSLDocumentsOperationCompleted, userState);
        }
        
        private void OnJSONGetURSLDocumentsOperationCompleted(object arg) {
            if ((this.JSONGetURSLDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetURSLDocumentsCompleted(this, new JSONGetURSLDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetURSLDocumentsByObject", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetURSLDocumentsByObject(URSLDocument urslDocument) {
            object[] results = this.Invoke("JSONGetURSLDocumentsByObject", new object[] {
                        urslDocument});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetURSLDocumentsByObjectAsync(URSLDocument urslDocument) {
            this.JSONGetURSLDocumentsByObjectAsync(urslDocument, null);
        }
        
        /// <remarks/>
        public void JSONGetURSLDocumentsByObjectAsync(URSLDocument urslDocument, object userState) {
            if ((this.JSONGetURSLDocumentsByObjectOperationCompleted == null)) {
                this.JSONGetURSLDocumentsByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetURSLDocumentsByObjectOperationCompleted);
            }
            this.InvokeAsync("JSONGetURSLDocumentsByObject", new object[] {
                        urslDocument}, this.JSONGetURSLDocumentsByObjectOperationCompleted, userState);
        }
        
        private void OnJSONGetURSLDocumentsByObjectOperationCompleted(object arg) {
            if ((this.JSONGetURSLDocumentsByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetURSLDocumentsByObjectCompleted(this, new JSONGetURSLDocumentsByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetURSLDocumentsByID", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetURSLDocumentsByID(string objectID) {
            object[] results = this.Invoke("JSONGetURSLDocumentsByID", new object[] {
                        objectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetURSLDocumentsByIDAsync(string objectID) {
            this.JSONGetURSLDocumentsByIDAsync(objectID, null);
        }
        
        /// <remarks/>
        public void JSONGetURSLDocumentsByIDAsync(string objectID, object userState) {
            if ((this.JSONGetURSLDocumentsByIDOperationCompleted == null)) {
                this.JSONGetURSLDocumentsByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetURSLDocumentsByIDOperationCompleted);
            }
            this.InvokeAsync("JSONGetURSLDocumentsByID", new object[] {
                        objectID}, this.JSONGetURSLDocumentsByIDOperationCompleted, userState);
        }
        
        private void OnJSONGetURSLDocumentsByIDOperationCompleted(object arg) {
            if ((this.JSONGetURSLDocumentsByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetURSLDocumentsByIDCompleted(this, new JSONGetURSLDocumentsByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetComplianceDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetComplianceDocuments(int rowLimit, string documentType, string subType, string description, string descriptionCondition, string documentOwner, string documentOwnerCondition, string accountYear, string documentDate, string createdFromDate, string createdToDate) {
            object[] results = this.Invoke("GetComplianceDocuments", new object[] {
                        rowLimit,
                        documentType,
                        subType,
                        description,
                        descriptionCondition,
                        documentOwner,
                        documentOwnerCondition,
                        accountYear,
                        documentDate,
                        createdFromDate,
                        createdToDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetComplianceDocumentsAsync(int rowLimit, string documentType, string subType, string description, string descriptionCondition, string documentOwner, string documentOwnerCondition, string accountYear, string documentDate, string createdFromDate, string createdToDate) {
            this.GetComplianceDocumentsAsync(rowLimit, documentType, subType, description, descriptionCondition, documentOwner, documentOwnerCondition, accountYear, documentDate, createdFromDate, createdToDate, null);
        }
        
        /// <remarks/>
        public void GetComplianceDocumentsAsync(int rowLimit, string documentType, string subType, string description, string descriptionCondition, string documentOwner, string documentOwnerCondition, string accountYear, string documentDate, string createdFromDate, string createdToDate, object userState) {
            if ((this.GetComplianceDocumentsOperationCompleted == null)) {
                this.GetComplianceDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetComplianceDocumentsOperationCompleted);
            }
            this.InvokeAsync("GetComplianceDocuments", new object[] {
                        rowLimit,
                        documentType,
                        subType,
                        description,
                        descriptionCondition,
                        documentOwner,
                        documentOwnerCondition,
                        accountYear,
                        documentDate,
                        createdFromDate,
                        createdToDate}, this.GetComplianceDocumentsOperationCompleted, userState);
        }
        
        private void OnGetComplianceDocumentsOperationCompleted(object arg) {
            if ((this.GetComplianceDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetComplianceDocumentsCompleted(this, new GetComplianceDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetComplianceDocumentsByObject", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetComplianceDocumentsByObject(ComplianceDocument complianceDocument) {
            object[] results = this.Invoke("GetComplianceDocumentsByObject", new object[] {
                        complianceDocument});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetComplianceDocumentsByObjectAsync(ComplianceDocument complianceDocument) {
            this.GetComplianceDocumentsByObjectAsync(complianceDocument, null);
        }
        
        /// <remarks/>
        public void GetComplianceDocumentsByObjectAsync(ComplianceDocument complianceDocument, object userState) {
            if ((this.GetComplianceDocumentsByObjectOperationCompleted == null)) {
                this.GetComplianceDocumentsByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetComplianceDocumentsByObjectOperationCompleted);
            }
            this.InvokeAsync("GetComplianceDocumentsByObject", new object[] {
                        complianceDocument}, this.GetComplianceDocumentsByObjectOperationCompleted, userState);
        }
        
        private void OnGetComplianceDocumentsByObjectOperationCompleted(object arg) {
            if ((this.GetComplianceDocumentsByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetComplianceDocumentsByObjectCompleted(this, new GetComplianceDocumentsByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/GetComplianceDocumentsByID", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetComplianceDocumentsByID(string objectID) {
            object[] results = this.Invoke("GetComplianceDocumentsByID", new object[] {
                        objectID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetComplianceDocumentsByIDAsync(string objectID) {
            this.GetComplianceDocumentsByIDAsync(objectID, null);
        }
        
        /// <remarks/>
        public void GetComplianceDocumentsByIDAsync(string objectID, object userState) {
            if ((this.GetComplianceDocumentsByIDOperationCompleted == null)) {
                this.GetComplianceDocumentsByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetComplianceDocumentsByIDOperationCompleted);
            }
            this.InvokeAsync("GetComplianceDocumentsByID", new object[] {
                        objectID}, this.GetComplianceDocumentsByIDOperationCompleted, userState);
        }
        
        private void OnGetComplianceDocumentsByIDOperationCompleted(object arg) {
            if ((this.GetComplianceDocumentsByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetComplianceDocumentsByIDCompleted(this, new GetComplianceDocumentsByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetComplianceDocuments", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetComplianceDocuments(int rowLimit, string documentType, string subType, string description, string descriptionCondition, string documentOwner, string documentOwnerCondition, string accountYear, string documentDate, string createdFromDate, string createdToDate) {
            object[] results = this.Invoke("JSONGetComplianceDocuments", new object[] {
                        rowLimit,
                        documentType,
                        subType,
                        description,
                        descriptionCondition,
                        documentOwner,
                        documentOwnerCondition,
                        accountYear,
                        documentDate,
                        createdFromDate,
                        createdToDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetComplianceDocumentsAsync(int rowLimit, string documentType, string subType, string description, string descriptionCondition, string documentOwner, string documentOwnerCondition, string accountYear, string documentDate, string createdFromDate, string createdToDate) {
            this.JSONGetComplianceDocumentsAsync(rowLimit, documentType, subType, description, descriptionCondition, documentOwner, documentOwnerCondition, accountYear, documentDate, createdFromDate, createdToDate, null);
        }
        
        /// <remarks/>
        public void JSONGetComplianceDocumentsAsync(int rowLimit, string documentType, string subType, string description, string descriptionCondition, string documentOwner, string documentOwnerCondition, string accountYear, string documentDate, string createdFromDate, string createdToDate, object userState) {
            if ((this.JSONGetComplianceDocumentsOperationCompleted == null)) {
                this.JSONGetComplianceDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetComplianceDocumentsOperationCompleted);
            }
            this.InvokeAsync("JSONGetComplianceDocuments", new object[] {
                        rowLimit,
                        documentType,
                        subType,
                        description,
                        descriptionCondition,
                        documentOwner,
                        documentOwnerCondition,
                        accountYear,
                        documentDate,
                        createdFromDate,
                        createdToDate}, this.JSONGetComplianceDocumentsOperationCompleted, userState);
        }
        
        private void OnJSONGetComplianceDocumentsOperationCompleted(object arg) {
            if ((this.JSONGetComplianceDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetComplianceDocumentsCompleted(this, new JSONGetComplianceDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetComplianceDocumentsByObject", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetComplianceDocumentsByObject(ComplianceDocument complianceDocument) {
            object[] results = this.Invoke("JSONGetComplianceDocumentsByObject", new object[] {
                        complianceDocument});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetComplianceDocumentsByObjectAsync(ComplianceDocument complianceDocument) {
            this.JSONGetComplianceDocumentsByObjectAsync(complianceDocument, null);
        }
        
        /// <remarks/>
        public void JSONGetComplianceDocumentsByObjectAsync(ComplianceDocument complianceDocument, object userState) {
            if ((this.JSONGetComplianceDocumentsByObjectOperationCompleted == null)) {
                this.JSONGetComplianceDocumentsByObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetComplianceDocumentsByObjectOperationCompleted);
            }
            this.InvokeAsync("JSONGetComplianceDocumentsByObject", new object[] {
                        complianceDocument}, this.JSONGetComplianceDocumentsByObjectOperationCompleted, userState);
        }
        
        private void OnJSONGetComplianceDocumentsByObjectOperationCompleted(object arg) {
            if ((this.JSONGetComplianceDocumentsByObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetComplianceDocumentsByObjectCompleted(this, new JSONGetComplianceDocumentsByObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/JSONGetComplianceDocumentsByID", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string JSONGetComplianceDocumentsByID(string objectID) {
            object[] results = this.Invoke("JSONGetComplianceDocumentsByID", new object[] {
                        objectID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void JSONGetComplianceDocumentsByIDAsync(string objectID) {
            this.JSONGetComplianceDocumentsByIDAsync(objectID, null);
        }
        
        /// <remarks/>
        public void JSONGetComplianceDocumentsByIDAsync(string objectID, object userState) {
            if ((this.JSONGetComplianceDocumentsByIDOperationCompleted == null)) {
                this.JSONGetComplianceDocumentsByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJSONGetComplianceDocumentsByIDOperationCompleted);
            }
            this.InvokeAsync("JSONGetComplianceDocumentsByID", new object[] {
                        objectID}, this.JSONGetComplianceDocumentsByIDOperationCompleted, userState);
        }
        
        private void OnJSONGetComplianceDocumentsByIDOperationCompleted(object arg) {
            if ((this.JSONGetComplianceDocumentsByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JSONGetComplianceDocumentsByIDCompleted(this, new JSONGetComplianceDocumentsByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/FNUploadDocument", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FNUploadDocument(string documentName, string documentTitle, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] documentContent, string documentClass, string objectStore) {
            object[] results = this.Invoke("FNUploadDocument", new object[] {
                        documentName,
                        documentTitle,
                        documentContent,
                        documentClass,
                        objectStore});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FNUploadDocumentAsync(string documentName, string documentTitle, byte[] documentContent, string documentClass, string objectStore) {
            this.FNUploadDocumentAsync(documentName, documentTitle, documentContent, documentClass, objectStore, null);
        }
        
        /// <remarks/>
        public void FNUploadDocumentAsync(string documentName, string documentTitle, byte[] documentContent, string documentClass, string objectStore, object userState) {
            if ((this.FNUploadDocumentOperationCompleted == null)) {
                this.FNUploadDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFNUploadDocumentOperationCompleted);
            }
            this.InvokeAsync("FNUploadDocument", new object[] {
                        documentName,
                        documentTitle,
                        documentContent,
                        documentClass,
                        objectStore}, this.FNUploadDocumentOperationCompleted, userState);
        }
        
        private void OnFNUploadDocumentOperationCompleted(object arg) {
            if ((this.FNUploadDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FNUploadDocumentCompleted(this, new FNUploadDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/FNUpdateDocumentProperty", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FNUpdateDocumentProperty(string documentID, string documentClass, string objectStore, string propertyKey, string propertyValue) {
            this.Invoke("FNUpdateDocumentProperty", new object[] {
                        documentID,
                        documentClass,
                        objectStore,
                        propertyKey,
                        propertyValue});
        }
        
        /// <remarks/>
        public void FNUpdateDocumentPropertyAsync(string documentID, string documentClass, string objectStore, string propertyKey, string propertyValue) {
            this.FNUpdateDocumentPropertyAsync(documentID, documentClass, objectStore, propertyKey, propertyValue, null);
        }
        
        /// <remarks/>
        public void FNUpdateDocumentPropertyAsync(string documentID, string documentClass, string objectStore, string propertyKey, string propertyValue, object userState) {
            if ((this.FNUpdateDocumentPropertyOperationCompleted == null)) {
                this.FNUpdateDocumentPropertyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFNUpdateDocumentPropertyOperationCompleted);
            }
            this.InvokeAsync("FNUpdateDocumentProperty", new object[] {
                        documentID,
                        documentClass,
                        objectStore,
                        propertyKey,
                        propertyValue}, this.FNUpdateDocumentPropertyOperationCompleted, userState);
        }
        
        private void OnFNUpdateDocumentPropertyOperationCompleted(object arg) {
            if ((this.FNUpdateDocumentPropertyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FNUpdateDocumentPropertyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/FNUpdateDocumentProperties", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FNUpdateDocumentProperties(string documentID, string documentClass, string objectStore, FileNetProperty[] documentProperties) {
            this.Invoke("FNUpdateDocumentProperties", new object[] {
                        documentID,
                        documentClass,
                        objectStore,
                        documentProperties});
        }
        
        /// <remarks/>
        public void FNUpdateDocumentPropertiesAsync(string documentID, string documentClass, string objectStore, FileNetProperty[] documentProperties) {
            this.FNUpdateDocumentPropertiesAsync(documentID, documentClass, objectStore, documentProperties, null);
        }
        
        /// <remarks/>
        public void FNUpdateDocumentPropertiesAsync(string documentID, string documentClass, string objectStore, FileNetProperty[] documentProperties, object userState) {
            if ((this.FNUpdateDocumentPropertiesOperationCompleted == null)) {
                this.FNUpdateDocumentPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFNUpdateDocumentPropertiesOperationCompleted);
            }
            this.InvokeAsync("FNUpdateDocumentProperties", new object[] {
                        documentID,
                        documentClass,
                        objectStore,
                        documentProperties}, this.FNUpdateDocumentPropertiesOperationCompleted, userState);
        }
        
        private void OnFNUpdateDocumentPropertiesOperationCompleted(object arg) {
            if ((this.FNUpdateDocumentPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FNUpdateDocumentPropertiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/FNFileDocument", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FNFileDocument(string documentID, string documentTitle, string documentClass, string objectStore, string folderPath) {
            this.Invoke("FNFileDocument", new object[] {
                        documentID,
                        documentTitle,
                        documentClass,
                        objectStore,
                        folderPath});
        }
        
        /// <remarks/>
        public void FNFileDocumentAsync(string documentID, string documentTitle, string documentClass, string objectStore, string folderPath) {
            this.FNFileDocumentAsync(documentID, documentTitle, documentClass, objectStore, folderPath, null);
        }
        
        /// <remarks/>
        public void FNFileDocumentAsync(string documentID, string documentTitle, string documentClass, string objectStore, string folderPath, object userState) {
            if ((this.FNFileDocumentOperationCompleted == null)) {
                this.FNFileDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFNFileDocumentOperationCompleted);
            }
            this.InvokeAsync("FNFileDocument", new object[] {
                        documentID,
                        documentTitle,
                        documentClass,
                        objectStore,
                        folderPath}, this.FNFileDocumentOperationCompleted, userState);
        }
        
        private void OnFNFileDocumentOperationCompleted(object arg) {
            if ((this.FNFileDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FNFileDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/FNUnfileDocument", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FNUnfileDocument(string folderID, string objectStore) {
            this.Invoke("FNUnfileDocument", new object[] {
                        folderID,
                        objectStore});
        }
        
        /// <remarks/>
        public void FNUnfileDocumentAsync(string folderID, string objectStore) {
            this.FNUnfileDocumentAsync(folderID, objectStore, null);
        }
        
        /// <remarks/>
        public void FNUnfileDocumentAsync(string folderID, string objectStore, object userState) {
            if ((this.FNUnfileDocumentOperationCompleted == null)) {
                this.FNUnfileDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFNUnfileDocumentOperationCompleted);
            }
            this.InvokeAsync("FNUnfileDocument", new object[] {
                        folderID,
                        objectStore}, this.FNUnfileDocumentOperationCompleted, userState);
        }
        
        private void OnFNUnfileDocumentOperationCompleted(object arg) {
            if ((this.FNUnfileDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FNUnfileDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/FNDeleteDocument", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FNDeleteDocument(string documentID, string documentClass, string objectStore) {
            this.Invoke("FNDeleteDocument", new object[] {
                        documentID,
                        documentClass,
                        objectStore});
        }
        
        /// <remarks/>
        public void FNDeleteDocumentAsync(string documentID, string documentClass, string objectStore) {
            this.FNDeleteDocumentAsync(documentID, documentClass, objectStore, null);
        }
        
        /// <remarks/>
        public void FNDeleteDocumentAsync(string documentID, string documentClass, string objectStore, object userState) {
            if ((this.FNDeleteDocumentOperationCompleted == null)) {
                this.FNDeleteDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFNDeleteDocumentOperationCompleted);
            }
            this.InvokeAsync("FNDeleteDocument", new object[] {
                        documentID,
                        documentClass,
                        objectStore}, this.FNDeleteDocumentOperationCompleted, userState);
        }
        
        private void OnFNDeleteDocumentOperationCompleted(object arg) {
            if ((this.FNDeleteDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FNDeleteDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/FNFindDocument", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FileNetProperty[] FNFindDocument(string documentID, string objectStore) {
            object[] results = this.Invoke("FNFindDocument", new object[] {
                        documentID,
                        objectStore});
            return ((FileNetProperty[])(results[0]));
        }
        
        /// <remarks/>
        public void FNFindDocumentAsync(string documentID, string objectStore) {
            this.FNFindDocumentAsync(documentID, objectStore, null);
        }
        
        /// <remarks/>
        public void FNFindDocumentAsync(string documentID, string objectStore, object userState) {
            if ((this.FNFindDocumentOperationCompleted == null)) {
                this.FNFindDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFNFindDocumentOperationCompleted);
            }
            this.InvokeAsync("FNFindDocument", new object[] {
                        documentID,
                        objectStore}, this.FNFindDocumentOperationCompleted, userState);
        }
        
        private void OnFNFindDocumentOperationCompleted(object arg) {
            if ((this.FNFindDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FNFindDocumentCompleted(this, new FNFindDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://talbotuw.com/webservices/FNFindDocumentFolders", RequestNamespace="http://talbotuw.com/webservices", ResponseNamespace="http://talbotuw.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FNFindDocumentFolders(string documentID, string documentClass, string objectStore) {
            object[] results = this.Invoke("FNFindDocumentFolders", new object[] {
                        documentID,
                        documentClass,
                        objectStore});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FNFindDocumentFoldersAsync(string documentID, string documentClass, string objectStore) {
            this.FNFindDocumentFoldersAsync(documentID, documentClass, objectStore, null);
        }
        
        /// <remarks/>
        public void FNFindDocumentFoldersAsync(string documentID, string documentClass, string objectStore, object userState) {
            if ((this.FNFindDocumentFoldersOperationCompleted == null)) {
                this.FNFindDocumentFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFNFindDocumentFoldersOperationCompleted);
            }
            this.InvokeAsync("FNFindDocumentFolders", new object[] {
                        documentID,
                        documentClass,
                        objectStore}, this.FNFindDocumentFoldersOperationCompleted, userState);
        }
        
        private void OnFNFindDocumentFoldersOperationCompleted(object arg) {
            if ((this.FNFindDocumentFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FNFindDocumentFoldersCompleted(this, new FNFindDocumentFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://talbotuw.com/webservices")]
    public partial class UWDocument {
        
        private int rowLimitField;
        
        private bool isDetailedField;
        
        private string objectIDField;
        
        private string policyIDField;
        
        private string documentTitleField;
        
        private string documentTypeField;
        
        private string descriptionField;
        
        private string indexPersonField;
        
        private string accountingYearField;
        
        private string insuredNameField;
        
        private string underwriterField;
        
        private string classOfBusinessField;
        
        private string statusField;
        
        private string entryStatusField;
        
        private string workflowStatusField;
        
        private string inceptionFromDateField;
        
        private string inceptionToDateField;
        
        private string writtenFromDateField;
        
        private string writtenToDateField;
        
        private string oPSInfoField;
        
        private string createdByField;
        
        private string createdFromDateField;
        
        private string createdToDateField;
        
        private string policyIDConditionField;
        
        private string documentTitleConditionField;
        
        private string descriptionConditionField;
        
        private string indexPersonConditionField;
        
        private string insuredNameConditionField;
        
        private string underwriterConditionField;
        
        private string createdByConditionField;
        
        /// <remarks/>
        public int RowLimit {
            get {
                return this.rowLimitField;
            }
            set {
                this.rowLimitField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDetailed {
            get {
                return this.isDetailedField;
            }
            set {
                this.isDetailedField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectID {
            get {
                return this.objectIDField;
            }
            set {
                this.objectIDField = value;
            }
        }
        
        /// <remarks/>
        public string PolicyID {
            get {
                return this.policyIDField;
            }
            set {
                this.policyIDField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentTitle {
            get {
                return this.documentTitleField;
            }
            set {
                this.documentTitleField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string IndexPerson {
            get {
                return this.indexPersonField;
            }
            set {
                this.indexPersonField = value;
            }
        }
        
        /// <remarks/>
        public string AccountingYear {
            get {
                return this.accountingYearField;
            }
            set {
                this.accountingYearField = value;
            }
        }
        
        /// <remarks/>
        public string InsuredName {
            get {
                return this.insuredNameField;
            }
            set {
                this.insuredNameField = value;
            }
        }
        
        /// <remarks/>
        public string Underwriter {
            get {
                return this.underwriterField;
            }
            set {
                this.underwriterField = value;
            }
        }
        
        /// <remarks/>
        public string ClassOfBusiness {
            get {
                return this.classOfBusinessField;
            }
            set {
                this.classOfBusinessField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string EntryStatus {
            get {
                return this.entryStatusField;
            }
            set {
                this.entryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string WorkflowStatus {
            get {
                return this.workflowStatusField;
            }
            set {
                this.workflowStatusField = value;
            }
        }
        
        /// <remarks/>
        public string InceptionFromDate {
            get {
                return this.inceptionFromDateField;
            }
            set {
                this.inceptionFromDateField = value;
            }
        }
        
        /// <remarks/>
        public string InceptionToDate {
            get {
                return this.inceptionToDateField;
            }
            set {
                this.inceptionToDateField = value;
            }
        }
        
        /// <remarks/>
        public string WrittenFromDate {
            get {
                return this.writtenFromDateField;
            }
            set {
                this.writtenFromDateField = value;
            }
        }
        
        /// <remarks/>
        public string WrittenToDate {
            get {
                return this.writtenToDateField;
            }
            set {
                this.writtenToDateField = value;
            }
        }
        
        /// <remarks/>
        public string OPSInfo {
            get {
                return this.oPSInfoField;
            }
            set {
                this.oPSInfoField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedBy {
            get {
                return this.createdByField;
            }
            set {
                this.createdByField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedFromDate {
            get {
                return this.createdFromDateField;
            }
            set {
                this.createdFromDateField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedToDate {
            get {
                return this.createdToDateField;
            }
            set {
                this.createdToDateField = value;
            }
        }
        
        /// <remarks/>
        public string PolicyIDCondition {
            get {
                return this.policyIDConditionField;
            }
            set {
                this.policyIDConditionField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentTitleCondition {
            get {
                return this.documentTitleConditionField;
            }
            set {
                this.documentTitleConditionField = value;
            }
        }
        
        /// <remarks/>
        public string DescriptionCondition {
            get {
                return this.descriptionConditionField;
            }
            set {
                this.descriptionConditionField = value;
            }
        }
        
        /// <remarks/>
        public string IndexPersonCondition {
            get {
                return this.indexPersonConditionField;
            }
            set {
                this.indexPersonConditionField = value;
            }
        }
        
        /// <remarks/>
        public string InsuredNameCondition {
            get {
                return this.insuredNameConditionField;
            }
            set {
                this.insuredNameConditionField = value;
            }
        }
        
        /// <remarks/>
        public string UnderwriterCondition {
            get {
                return this.underwriterConditionField;
            }
            set {
                this.underwriterConditionField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedByCondition {
            get {
                return this.createdByConditionField;
            }
            set {
                this.createdByConditionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://talbotuw.com/webservices")]
    public partial class FileNetProperty {
        
        private string keyField;
        
        private object valueField;
        
        private string delimiterField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string Delimiter {
            get {
                return this.delimiterField;
            }
            set {
                this.delimiterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://talbotuw.com/webservices")]
    public partial class ComplianceDocument {
        
        private int rowLimitField;
        
        private string objectIDField;
        
        private string documentTypeField;
        
        private string subTypeField;
        
        private string descriptionField;
        
        private string documentOwnerField;
        
        private string accountYearField;
        
        private string documentDateField;
        
        private string createdFromDateField;
        
        private string createdToDateField;
        
        private string descriptionConditionField;
        
        private string documentOwnerConditionField;
        
        /// <remarks/>
        public int RowLimit {
            get {
                return this.rowLimitField;
            }
            set {
                this.rowLimitField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectID {
            get {
                return this.objectIDField;
            }
            set {
                this.objectIDField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string SubType {
            get {
                return this.subTypeField;
            }
            set {
                this.subTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentOwner {
            get {
                return this.documentOwnerField;
            }
            set {
                this.documentOwnerField = value;
            }
        }
        
        /// <remarks/>
        public string AccountYear {
            get {
                return this.accountYearField;
            }
            set {
                this.accountYearField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentDate {
            get {
                return this.documentDateField;
            }
            set {
                this.documentDateField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedFromDate {
            get {
                return this.createdFromDateField;
            }
            set {
                this.createdFromDateField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedToDate {
            get {
                return this.createdToDateField;
            }
            set {
                this.createdToDateField = value;
            }
        }
        
        /// <remarks/>
        public string DescriptionCondition {
            get {
                return this.descriptionConditionField;
            }
            set {
                this.descriptionConditionField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentOwnerCondition {
            get {
                return this.documentOwnerConditionField;
            }
            set {
                this.documentOwnerConditionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://talbotuw.com/webservices")]
    public partial class URSLDocument {
        
        private int rowLimitField;
        
        private string objectIDField;
        
        private string documentTypeField;
        
        private string certificateNumberField;
        
        private string claimNumberField;
        
        private string descriptionField;
        
        private string insuredNameField;
        
        private string insuredPropertyField;
        
        private string pageNumberField;
        
        private string boxNameField;
        
        private string dateInputFromField;
        
        private string dateInputToField;
        
        private string createdFromDateField;
        
        private string createdToDateField;
        
        private string descriptionConditionField;
        
        private string certificateNumberConditionField;
        
        private string claimNumberConditionField;
        
        private string insuredNameConditionField;
        
        private string insuredPropertyConditionField;
        
        /// <remarks/>
        public int RowLimit {
            get {
                return this.rowLimitField;
            }
            set {
                this.rowLimitField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectID {
            get {
                return this.objectIDField;
            }
            set {
                this.objectIDField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string CertificateNumber {
            get {
                return this.certificateNumberField;
            }
            set {
                this.certificateNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ClaimNumber {
            get {
                return this.claimNumberField;
            }
            set {
                this.claimNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string InsuredName {
            get {
                return this.insuredNameField;
            }
            set {
                this.insuredNameField = value;
            }
        }
        
        /// <remarks/>
        public string InsuredProperty {
            get {
                return this.insuredPropertyField;
            }
            set {
                this.insuredPropertyField = value;
            }
        }
        
        /// <remarks/>
        public string PageNumber {
            get {
                return this.pageNumberField;
            }
            set {
                this.pageNumberField = value;
            }
        }
        
        /// <remarks/>
        public string BoxName {
            get {
                return this.boxNameField;
            }
            set {
                this.boxNameField = value;
            }
        }
        
        /// <remarks/>
        public string DateInputFrom {
            get {
                return this.dateInputFromField;
            }
            set {
                this.dateInputFromField = value;
            }
        }
        
        /// <remarks/>
        public string DateInputTo {
            get {
                return this.dateInputToField;
            }
            set {
                this.dateInputToField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedFromDate {
            get {
                return this.createdFromDateField;
            }
            set {
                this.createdFromDateField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedToDate {
            get {
                return this.createdToDateField;
            }
            set {
                this.createdToDateField = value;
            }
        }
        
        /// <remarks/>
        public string DescriptionCondition {
            get {
                return this.descriptionConditionField;
            }
            set {
                this.descriptionConditionField = value;
            }
        }
        
        /// <remarks/>
        public string CertificateNumberCondition {
            get {
                return this.certificateNumberConditionField;
            }
            set {
                this.certificateNumberConditionField = value;
            }
        }
        
        /// <remarks/>
        public string ClaimNumberCondition {
            get {
                return this.claimNumberConditionField;
            }
            set {
                this.claimNumberConditionField = value;
            }
        }
        
        /// <remarks/>
        public string InsuredNameCondition {
            get {
                return this.insuredNameConditionField;
            }
            set {
                this.insuredNameConditionField = value;
            }
        }
        
        /// <remarks/>
        public string InsuredPropertyCondition {
            get {
                return this.insuredPropertyConditionField;
            }
            set {
                this.insuredPropertyConditionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://talbotuw.com/webservices")]
    public partial class ITDocument {
        
        private int rowLimitField;
        
        private int searchTypeField;
        
        private string objectIDField;
        
        private string documentTitleField;
        
        private string documentDateField;
        
        private string descriptionField;
        
        private string completedByField;
        
        private string capacityFormTypeField;
        
        private string securityFormTypeField;
        
        private string userNameField;
        
        private string formDateField;
        
        private string manufacturerField;
        
        private string softwareNameField;
        
        private string versionNumberField;
        
        private string createdFromDateField;
        
        private string createdToDateField;
        
        private string documentTitleConditionField;
        
        private string descriptionConditionField;
        
        private string userNameConditionField;
        
        private string completedByConditionField;
        
        private string manufacturerConditionField;
        
        private string softwareNameConditionField;
        
        private string versionNumberConditionField;
        
        /// <remarks/>
        public int RowLimit {
            get {
                return this.rowLimitField;
            }
            set {
                this.rowLimitField = value;
            }
        }
        
        /// <remarks/>
        public int SearchType {
            get {
                return this.searchTypeField;
            }
            set {
                this.searchTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ObjectID {
            get {
                return this.objectIDField;
            }
            set {
                this.objectIDField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentTitle {
            get {
                return this.documentTitleField;
            }
            set {
                this.documentTitleField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentDate {
            get {
                return this.documentDateField;
            }
            set {
                this.documentDateField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string CompletedBy {
            get {
                return this.completedByField;
            }
            set {
                this.completedByField = value;
            }
        }
        
        /// <remarks/>
        public string CapacityFormType {
            get {
                return this.capacityFormTypeField;
            }
            set {
                this.capacityFormTypeField = value;
            }
        }
        
        /// <remarks/>
        public string SecurityFormType {
            get {
                return this.securityFormTypeField;
            }
            set {
                this.securityFormTypeField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string FormDate {
            get {
                return this.formDateField;
            }
            set {
                this.formDateField = value;
            }
        }
        
        /// <remarks/>
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        public string SoftwareName {
            get {
                return this.softwareNameField;
            }
            set {
                this.softwareNameField = value;
            }
        }
        
        /// <remarks/>
        public string VersionNumber {
            get {
                return this.versionNumberField;
            }
            set {
                this.versionNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedFromDate {
            get {
                return this.createdFromDateField;
            }
            set {
                this.createdFromDateField = value;
            }
        }
        
        /// <remarks/>
        public string CreatedToDate {
            get {
                return this.createdToDateField;
            }
            set {
                this.createdToDateField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentTitleCondition {
            get {
                return this.documentTitleConditionField;
            }
            set {
                this.documentTitleConditionField = value;
            }
        }
        
        /// <remarks/>
        public string DescriptionCondition {
            get {
                return this.descriptionConditionField;
            }
            set {
                this.descriptionConditionField = value;
            }
        }
        
        /// <remarks/>
        public string UserNameCondition {
            get {
                return this.userNameConditionField;
            }
            set {
                this.userNameConditionField = value;
            }
        }
        
        /// <remarks/>
        public string CompletedByCondition {
            get {
                return this.completedByConditionField;
            }
            set {
                this.completedByConditionField = value;
            }
        }
        
        /// <remarks/>
        public string ManufacturerCondition {
            get {
                return this.manufacturerConditionField;
            }
            set {
                this.manufacturerConditionField = value;
            }
        }
        
        /// <remarks/>
        public string SoftwareNameCondition {
            get {
                return this.softwareNameConditionField;
            }
            set {
                this.softwareNameConditionField = value;
            }
        }
        
        /// <remarks/>
        public string VersionNumberCondition {
            get {
                return this.versionNumberConditionField;
            }
            set {
                this.versionNumberConditionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://talbotuw.com/webservices")]
    public partial class DocVersion {
        
        private System.Guid guidField;
        
        private string polIDField;
        
        private string documentTypeField;
        
        private int accountingYearrField;
        
        private string entryStatusField;
        
        private System.DateTime inceptionDateField;
        
        private string cOBField;
        
        private string statusField;
        
        private string uWRField;
        
        private string insuredNameField;
        
        private string descriptionField;
        
        private System.DateTime loadToDMSDateTimeField;
        
        private string documentTitleField;
        
        /// <remarks/>
        public System.Guid Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
        
        /// <remarks/>
        public string PolID {
            get {
                return this.polIDField;
            }
            set {
                this.polIDField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        public int AccountingYearr {
            get {
                return this.accountingYearrField;
            }
            set {
                this.accountingYearrField = value;
            }
        }
        
        /// <remarks/>
        public string EntryStatus {
            get {
                return this.entryStatusField;
            }
            set {
                this.entryStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime InceptionDate {
            get {
                return this.inceptionDateField;
            }
            set {
                this.inceptionDateField = value;
            }
        }
        
        /// <remarks/>
        public string COB {
            get {
                return this.cOBField;
            }
            set {
                this.cOBField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string UWR {
            get {
                return this.uWRField;
            }
            set {
                this.uWRField = value;
            }
        }
        
        /// <remarks/>
        public string InsuredName {
            get {
                return this.insuredNameField;
            }
            set {
                this.insuredNameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LoadToDMSDateTime {
            get {
                return this.loadToDMSDateTimeField;
            }
            set {
                this.loadToDMSDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentTitle {
            get {
                return this.documentTitleField;
            }
            set {
                this.documentTitleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUWDocumentsCompletedEventHandler(object sender, GetUWDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUWDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUWDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUWDocumentsByObjectCompletedEventHandler(object sender, GetUWDocumentsByObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUWDocumentsByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUWDocumentsByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUWDocumentByIDCompletedEventHandler(object sender, GetUWDocumentByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUWDocumentByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUWDocumentByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetUWDocumentsCompletedEventHandler(object sender, JSONGetUWDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetUWDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetUWDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetUWDocumentsByObjectCompletedEventHandler(object sender, JSONGetUWDocumentsByObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetUWDocumentsByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetUWDocumentsByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetUWDocumentByIDCompletedEventHandler(object sender, JSONGetUWDocumentByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetUWDocumentByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetUWDocumentByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDMSDocumentsCompletedEventHandler(object sender, GetDMSDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDMSDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDMSDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocVersion[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocVersion[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDMSUWDocumentsCompletedEventHandler(object sender, GetDMSUWDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDMSUWDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDMSUWDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITDocumentsCompletedEventHandler(object sender, GetITDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITDocumentsByObjectCompletedEventHandler(object sender, GetITDocumentsByObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITDocumentsByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITDocumentsByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITDocumentByIDCompletedEventHandler(object sender, GetITDocumentByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITDocumentByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITDocumentByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetITDocumentsCompletedEventHandler(object sender, JSONGetITDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetITDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetITDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetITDocumentsByObjectCompletedEventHandler(object sender, JSONGetITDocumentsByObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetITDocumentsByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetITDocumentsByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetITDocumentByIDCompletedEventHandler(object sender, JSONGetITDocumentByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetITDocumentByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetITDocumentByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetURSLDocumentsCompletedEventHandler(object sender, GetURSLDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetURSLDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetURSLDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetURSLDocumentsByObjectCompletedEventHandler(object sender, GetURSLDocumentsByObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetURSLDocumentsByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetURSLDocumentsByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetURSLDocumentsByIDCompletedEventHandler(object sender, GetURSLDocumentsByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetURSLDocumentsByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetURSLDocumentsByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetURSLDocumentsCompletedEventHandler(object sender, JSONGetURSLDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetURSLDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetURSLDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetURSLDocumentsByObjectCompletedEventHandler(object sender, JSONGetURSLDocumentsByObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetURSLDocumentsByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetURSLDocumentsByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetURSLDocumentsByIDCompletedEventHandler(object sender, JSONGetURSLDocumentsByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetURSLDocumentsByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetURSLDocumentsByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetComplianceDocumentsCompletedEventHandler(object sender, GetComplianceDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetComplianceDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetComplianceDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetComplianceDocumentsByObjectCompletedEventHandler(object sender, GetComplianceDocumentsByObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetComplianceDocumentsByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetComplianceDocumentsByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetComplianceDocumentsByIDCompletedEventHandler(object sender, GetComplianceDocumentsByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetComplianceDocumentsByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetComplianceDocumentsByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetComplianceDocumentsCompletedEventHandler(object sender, JSONGetComplianceDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetComplianceDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetComplianceDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetComplianceDocumentsByObjectCompletedEventHandler(object sender, JSONGetComplianceDocumentsByObjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetComplianceDocumentsByObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetComplianceDocumentsByObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JSONGetComplianceDocumentsByIDCompletedEventHandler(object sender, JSONGetComplianceDocumentsByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JSONGetComplianceDocumentsByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JSONGetComplianceDocumentsByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FNUploadDocumentCompletedEventHandler(object sender, FNUploadDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FNUploadDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FNUploadDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FNUpdateDocumentPropertyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FNUpdateDocumentPropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FNFileDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FNUnfileDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FNDeleteDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FNFindDocumentCompletedEventHandler(object sender, FNFindDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FNFindDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FNFindDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FileNetProperty[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FileNetProperty[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FNFindDocumentFoldersCompletedEventHandler(object sender, FNFindDocumentFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FNFindDocumentFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FNFindDocumentFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591